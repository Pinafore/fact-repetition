"""snapshot v2

Revision ID: 53a244f1fc99
Revises: 24b6a54c532e
Create Date: 2022-08-05 04:35:19.229968

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '53a244f1fc99'
down_revision = '24b6a54c532e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cardsnapshotv2',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['schedule_request_id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cardsnapshotv2_card_id'), 'cardsnapshotv2', ['card_id'], unique=False)
    op.create_index(op.f('ix_cardsnapshotv2_date'), 'cardsnapshotv2', ['date'], unique=False)
    op.create_index(op.f('ix_cardsnapshotv2_id'), 'cardsnapshotv2', ['id'], unique=False)
    op.create_index(op.f('ix_cardsnapshotv2_schedule_request_id'), 'cardsnapshotv2', ['schedule_request_id'], unique=False)
    op.create_table('usercardsnapshotv2',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('leitner_box', sa.Integer(), nullable=True),
    sa.Column('leitner_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('sm2_efactor', sa.Float(), nullable=True),
    sa.Column('sm2_interval', sa.Float(), nullable=True),
    sa.Column('sm2_repetition', sa.Integer(), nullable=True),
    sa.Column('sm2_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('correct_on_first_try', sa.Boolean(), nullable=True),
    sa.Column('correct_on_first_try_session', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['schedule_request_id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usercardsnapshotv2_card_id'), 'usercardsnapshotv2', ['card_id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_date'), 'usercardsnapshotv2', ['date'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_id'), 'usercardsnapshotv2', ['id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_schedule_request_id'), 'usercardsnapshotv2', ['schedule_request_id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_user_id'), 'usercardsnapshotv2', ['user_id'], unique=False)
    op.create_table('usersnapshotv2',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['schedule_request_id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usersnapshotv2_date'), 'usersnapshotv2', ['date'], unique=False)
    op.create_index(op.f('ix_usersnapshotv2_id'), 'usersnapshotv2', ['id'], unique=False)
    op.create_index(op.f('ix_usersnapshotv2_schedule_request_id'), 'usersnapshotv2', ['schedule_request_id'], unique=False)
    op.create_index(op.f('ix_usersnapshotv2_user_id'), 'usersnapshotv2', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_usersnapshotv2_user_id'), table_name='usersnapshotv2')
    op.drop_index(op.f('ix_usersnapshotv2_schedule_request_id'), table_name='usersnapshotv2')
    op.drop_index(op.f('ix_usersnapshotv2_id'), table_name='usersnapshotv2')
    op.drop_index(op.f('ix_usersnapshotv2_date'), table_name='usersnapshotv2')
    op.drop_table('usersnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_user_id'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_schedule_request_id'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_id'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_date'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_card_id'), table_name='usercardsnapshotv2')
    op.drop_table('usercardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshotv2_schedule_request_id'), table_name='cardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshotv2_id'), table_name='cardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshotv2_date'), table_name='cardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshotv2_card_id'), table_name='cardsnapshotv2')
    op.drop_table('cardsnapshotv2')
    # ### end Alembic commands ###
