"""initialize

Revision ID: 5d990d3a9566
Revises: 
Create Date: 2022-08-08 16:52:32.669158

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import karl

# revision identifiers, used by Alembic.
revision = '5d990d3a9566'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('card',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('text', sa.String(), nullable=False),
    sa.Column('answer', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('deck_name', sa.String(), nullable=True),
    sa.Column('deck_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_card_id'), 'card', ['id'], unique=False)
    op.create_table('schedulerequest',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('card_ids', sa.ARRAY(sa.String()), nullable=False),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('repetition_model', sa.Enum('leitner', 'karl', 'sm2', 'karl100', 'karl50', 'karl85', 'settles', name='repetitionmodel'), nullable=True),
    sa.Column('recall_target', sa.Float(), nullable=True),
    sa.Column('recall_target_lowest', sa.Float(), nullable=True),
    sa.Column('recall_target_highest', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_schedulerequest_id'), 'schedulerequest', ['id'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('cardfeaturevector',
    sa.Column('card_id', sa.String(), nullable=False),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('card_id')
    )
    op.create_index(op.f('ix_cardfeaturevector_card_id'), 'cardfeaturevector', ['card_id'], unique=False)
    op.create_table('cardsnapshot',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cardsnapshot_card_id'), 'cardsnapshot', ['card_id'], unique=False)
    op.create_index(op.f('ix_cardsnapshot_date'), 'cardsnapshot', ['date'], unique=False)
    op.create_index(op.f('ix_cardsnapshot_id'), 'cardsnapshot', ['id'], unique=False)
    op.create_table('cardsnapshotv2',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['schedule_request_id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cardsnapshotv2_card_id'), 'cardsnapshotv2', ['card_id'], unique=False)
    op.create_index(op.f('ix_cardsnapshotv2_date'), 'cardsnapshotv2', ['date'], unique=False)
    op.create_index(op.f('ix_cardsnapshotv2_id'), 'cardsnapshotv2', ['id'], unique=False)
    op.create_index(op.f('ix_cardsnapshotv2_schedule_request_id'), 'cardsnapshotv2', ['schedule_request_id'], unique=False)
    op.create_table('embedding',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('embedding', karl.models.embedding.BinaryNumpy(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['card.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_embedding_id'), 'embedding', ['id'], unique=False)
    op.create_table('leitner',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('card_id', sa.String(), nullable=False),
    sa.Column('box', sa.Integer(), nullable=False),
    sa.Column('scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'card_id')
    )
    op.create_index(op.f('ix_leitner_card_id'), 'leitner', ['card_id'], unique=False)
    op.create_index(op.f('ix_leitner_user_id'), 'leitner', ['user_id'], unique=False)
    op.create_table('parameters',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('repetition_model', sa.String(), nullable=False),
    sa.Column('card_embedding', sa.Float(), nullable=False),
    sa.Column('recall', sa.Float(), nullable=False),
    sa.Column('recall_target', sa.Float(), nullable=False),
    sa.Column('category', sa.Float(), nullable=False),
    sa.Column('answer', sa.Float(), nullable=False),
    sa.Column('leitner', sa.Float(), nullable=False),
    sa.Column('sm2', sa.Float(), nullable=False),
    sa.Column('decay_qrep', sa.Float(), nullable=False),
    sa.Column('cool_down', sa.Float(), nullable=False),
    sa.Column('cool_down_time_correct', sa.Integer(), nullable=False),
    sa.Column('cool_down_time_wrong', sa.Integer(), nullable=False),
    sa.Column('max_recent_facts', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parameters_id'), 'parameters', ['id'], unique=False)
    op.create_table('sm2',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('card_id', sa.String(), nullable=False),
    sa.Column('efactor', sa.Float(), nullable=False),
    sa.Column('interval', sa.Float(), nullable=False),
    sa.Column('repetition', sa.Integer(), nullable=False),
    sa.Column('scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'card_id')
    )
    op.create_index(op.f('ix_sm2_card_id'), 'sm2', ['card_id'], unique=False)
    op.create_index(op.f('ix_sm2_user_id'), 'sm2', ['user_id'], unique=False)
    op.create_table('studyrecord',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('debug_id', sa.String(), nullable=True),
    sa.Column('studyset_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('deck_id', sa.String(), nullable=True),
    sa.Column('label', sa.Boolean(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('elapsed_milliseconds_text', sa.Integer(), nullable=True),
    sa.Column('elapsed_milliseconds_answer', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('count_session', sa.Integer(), nullable=False),
    sa.Column('typed', sa.String(), nullable=True),
    sa.Column('recommendation', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['debug_id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_studyrecord_card_id'), 'studyrecord', ['card_id'], unique=False)
    op.create_index(op.f('ix_studyrecord_debug_id'), 'studyrecord', ['debug_id'], unique=False)
    op.create_index(op.f('ix_studyrecord_id'), 'studyrecord', ['id'], unique=False)
    op.create_index(op.f('ix_studyrecord_studyset_id'), 'studyrecord', ['studyset_id'], unique=False)
    op.create_index(op.f('ix_studyrecord_user_id'), 'studyrecord', ['user_id'], unique=False)
    op.create_table('testrecord',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('studyset_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('deck_id', sa.String(), nullable=True),
    sa.Column('label', sa.Boolean(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('elapsed_milliseconds_text', sa.Integer(), nullable=True),
    sa.Column('elapsed_milliseconds_answer', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('count_session', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_testrecord_card_id'), 'testrecord', ['card_id'], unique=False)
    op.create_index(op.f('ix_testrecord_id'), 'testrecord', ['id'], unique=False)
    op.create_index(op.f('ix_testrecord_studyset_id'), 'testrecord', ['studyset_id'], unique=False)
    op.create_index(op.f('ix_testrecord_user_id'), 'testrecord', ['user_id'], unique=False)
    op.create_table('usercardfeaturevector',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('card_id', sa.String(), nullable=False),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('correct_on_first_try', sa.Boolean(), nullable=True),
    sa.Column('correct_on_first_try_session', sa.Boolean(), nullable=True),
    sa.Column('leitner_box', sa.Integer(), nullable=True),
    sa.Column('leitner_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('sm2_efactor', sa.Float(), nullable=True),
    sa.Column('sm2_interval', sa.Float(), nullable=True),
    sa.Column('sm2_repetition', sa.Integer(), nullable=True),
    sa.Column('sm2_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'card_id')
    )
    op.create_index(op.f('ix_usercardfeaturevector_card_id'), 'usercardfeaturevector', ['card_id'], unique=False)
    op.create_index(op.f('ix_usercardfeaturevector_user_id'), 'usercardfeaturevector', ['user_id'], unique=False)
    op.create_table('usercardsnapshot',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('leitner_box', sa.Integer(), nullable=True),
    sa.Column('leitner_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('sm2_efactor', sa.Float(), nullable=True),
    sa.Column('sm2_interval', sa.Float(), nullable=True),
    sa.Column('sm2_repetition', sa.Integer(), nullable=True),
    sa.Column('sm2_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('correct_on_first_try', sa.Boolean(), nullable=True),
    sa.Column('correct_on_first_try_session', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usercardsnapshot_card_id'), 'usercardsnapshot', ['card_id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshot_date'), 'usercardsnapshot', ['date'], unique=False)
    op.create_index(op.f('ix_usercardsnapshot_id'), 'usercardsnapshot', ['id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshot_user_id'), 'usercardsnapshot', ['user_id'], unique=False)
    op.create_table('usercardsnapshotv2',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('leitner_box', sa.Integer(), nullable=True),
    sa.Column('leitner_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('sm2_efactor', sa.Float(), nullable=True),
    sa.Column('sm2_interval', sa.Float(), nullable=True),
    sa.Column('sm2_repetition', sa.Integer(), nullable=True),
    sa.Column('sm2_scheduled_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('correct_on_first_try', sa.Boolean(), nullable=True),
    sa.Column('correct_on_first_try_session', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['card.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['schedule_request_id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usercardsnapshotv2_card_id'), 'usercardsnapshotv2', ['card_id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_date'), 'usercardsnapshotv2', ['date'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_id'), 'usercardsnapshotv2', ['id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_schedule_request_id'), 'usercardsnapshotv2', ['schedule_request_id'], unique=False)
    op.create_index(op.f('ix_usercardsnapshotv2_user_id'), 'usercardsnapshotv2', ['user_id'], unique=False)
    op.create_table('userfeaturevector',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_userfeaturevector_user_id'), 'userfeaturevector', ['user_id'], unique=False)
    op.create_table('usersnapshot',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usersnapshot_date'), 'usersnapshot', ['date'], unique=False)
    op.create_index(op.f('ix_usersnapshot_id'), 'usersnapshot', ['id'], unique=False)
    op.create_index(op.f('ix_usersnapshot_user_id'), 'usersnapshot', ['user_id'], unique=False)
    op.create_table('usersnapshotv2',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('schedule_request_id', sa.String(), nullable=True),
    sa.Column('date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('count_positive', sa.Integer(), nullable=True),
    sa.Column('count_negative', sa.Integer(), nullable=True),
    sa.Column('count', sa.Integer(), nullable=True),
    sa.Column('count_positive_session', sa.Integer(), nullable=True),
    sa.Column('count_negative_session', sa.Integer(), nullable=True),
    sa.Column('count_session', sa.Integer(), nullable=True),
    sa.Column('delta', sa.Integer(), nullable=True),
    sa.Column('previous_delta', sa.Integer(), nullable=True),
    sa.Column('previous_study_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response', sa.Boolean(), nullable=True),
    sa.Column('delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_delta_session', sa.Integer(), nullable=True),
    sa.Column('previous_study_date_session', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('previous_study_response_session', sa.Boolean(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['schedule_request_id'], ['schedulerequest.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_usersnapshotv2_date'), 'usersnapshotv2', ['date'], unique=False)
    op.create_index(op.f('ix_usersnapshotv2_id'), 'usersnapshotv2', ['id'], unique=False)
    op.create_index(op.f('ix_usersnapshotv2_schedule_request_id'), 'usersnapshotv2', ['schedule_request_id'], unique=False)
    op.create_index(op.f('ix_usersnapshotv2_user_id'), 'usersnapshotv2', ['user_id'], unique=False)
    op.create_table('userstatsv2',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('deck_id', sa.String(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('n_cards_total', sa.Integer(), nullable=False),
    sa.Column('n_cards_positive', sa.Integer(), nullable=False),
    sa.Column('n_new_cards_total', sa.Integer(), nullable=False),
    sa.Column('n_old_cards_total', sa.Integer(), nullable=False),
    sa.Column('n_new_cards_positive', sa.Integer(), nullable=False),
    sa.Column('n_old_cards_positive', sa.Integer(), nullable=False),
    sa.Column('elapsed_milliseconds_text', sa.Integer(), nullable=False),
    sa.Column('elapsed_milliseconds_answer', sa.Integer(), nullable=False),
    sa.Column('n_days_studied', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_userstatsv2_deck_id'), 'userstatsv2', ['deck_id'], unique=False)
    op.create_index(op.f('ix_userstatsv2_id'), 'userstatsv2', ['id'], unique=False)
    op.create_index(op.f('ix_userstatsv2_user_id'), 'userstatsv2', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_userstatsv2_user_id'), table_name='userstatsv2')
    op.drop_index(op.f('ix_userstatsv2_id'), table_name='userstatsv2')
    op.drop_index(op.f('ix_userstatsv2_deck_id'), table_name='userstatsv2')
    op.drop_table('userstatsv2')
    op.drop_index(op.f('ix_usersnapshotv2_user_id'), table_name='usersnapshotv2')
    op.drop_index(op.f('ix_usersnapshotv2_schedule_request_id'), table_name='usersnapshotv2')
    op.drop_index(op.f('ix_usersnapshotv2_id'), table_name='usersnapshotv2')
    op.drop_index(op.f('ix_usersnapshotv2_date'), table_name='usersnapshotv2')
    op.drop_table('usersnapshotv2')
    op.drop_index(op.f('ix_usersnapshot_user_id'), table_name='usersnapshot')
    op.drop_index(op.f('ix_usersnapshot_id'), table_name='usersnapshot')
    op.drop_index(op.f('ix_usersnapshot_date'), table_name='usersnapshot')
    op.drop_table('usersnapshot')
    op.drop_index(op.f('ix_userfeaturevector_user_id'), table_name='userfeaturevector')
    op.drop_table('userfeaturevector')
    op.drop_index(op.f('ix_usercardsnapshotv2_user_id'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_schedule_request_id'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_id'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_date'), table_name='usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshotv2_card_id'), table_name='usercardsnapshotv2')
    op.drop_table('usercardsnapshotv2')
    op.drop_index(op.f('ix_usercardsnapshot_user_id'), table_name='usercardsnapshot')
    op.drop_index(op.f('ix_usercardsnapshot_id'), table_name='usercardsnapshot')
    op.drop_index(op.f('ix_usercardsnapshot_date'), table_name='usercardsnapshot')
    op.drop_index(op.f('ix_usercardsnapshot_card_id'), table_name='usercardsnapshot')
    op.drop_table('usercardsnapshot')
    op.drop_index(op.f('ix_usercardfeaturevector_user_id'), table_name='usercardfeaturevector')
    op.drop_index(op.f('ix_usercardfeaturevector_card_id'), table_name='usercardfeaturevector')
    op.drop_table('usercardfeaturevector')
    op.drop_index(op.f('ix_testrecord_user_id'), table_name='testrecord')
    op.drop_index(op.f('ix_testrecord_studyset_id'), table_name='testrecord')
    op.drop_index(op.f('ix_testrecord_id'), table_name='testrecord')
    op.drop_index(op.f('ix_testrecord_card_id'), table_name='testrecord')
    op.drop_table('testrecord')
    op.drop_index(op.f('ix_studyrecord_user_id'), table_name='studyrecord')
    op.drop_index(op.f('ix_studyrecord_studyset_id'), table_name='studyrecord')
    op.drop_index(op.f('ix_studyrecord_id'), table_name='studyrecord')
    op.drop_index(op.f('ix_studyrecord_debug_id'), table_name='studyrecord')
    op.drop_index(op.f('ix_studyrecord_card_id'), table_name='studyrecord')
    op.drop_table('studyrecord')
    op.drop_index(op.f('ix_sm2_user_id'), table_name='sm2')
    op.drop_index(op.f('ix_sm2_card_id'), table_name='sm2')
    op.drop_table('sm2')
    op.drop_index(op.f('ix_parameters_id'), table_name='parameters')
    op.drop_table('parameters')
    op.drop_index(op.f('ix_leitner_user_id'), table_name='leitner')
    op.drop_index(op.f('ix_leitner_card_id'), table_name='leitner')
    op.drop_table('leitner')
    op.drop_index(op.f('ix_embedding_id'), table_name='embedding')
    op.drop_table('embedding')
    op.drop_index(op.f('ix_cardsnapshotv2_schedule_request_id'), table_name='cardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshotv2_id'), table_name='cardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshotv2_date'), table_name='cardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshotv2_card_id'), table_name='cardsnapshotv2')
    op.drop_table('cardsnapshotv2')
    op.drop_index(op.f('ix_cardsnapshot_id'), table_name='cardsnapshot')
    op.drop_index(op.f('ix_cardsnapshot_date'), table_name='cardsnapshot')
    op.drop_index(op.f('ix_cardsnapshot_card_id'), table_name='cardsnapshot')
    op.drop_table('cardsnapshot')
    op.drop_index(op.f('ix_cardfeaturevector_card_id'), table_name='cardfeaturevector')
    op.drop_table('cardfeaturevector')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_schedulerequest_id'), table_name='schedulerequest')
    op.drop_table('schedulerequest')
    op.drop_index(op.f('ix_card_id'), table_name='card')
    op.drop_table('card')
    # ### end Alembic commands ###
